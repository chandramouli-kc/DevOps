How to Deploy an Apple macOS EC2 Instance in AWS using Terraform
Guillermo Musumeci
Guillermo Musumeci

·
Follow

6 min read
·
Feb 12, 2022
4






In this story, we will learn how to deploy an Apple macOS EC2 Instance (VM) in AWS using Terraform.

Prerequisite #1: AWS Credentials
Before creating our AWS EC2 Instance, we will need AWS Credentials to execute our Terraform code.

The AWS provider offers a few options of providing credentials for authentication:

Static credentials
Environment variables
Shared credentials/configuration file
For this story, we will use static credentials. Please refer to the “How to create an IAM account and configure Terraform to use AWS static credentials?” story, if you need help to create the credentials.

Note: Using static credentials are great for learning and testing however hard-coded credentials are not recommended in production environments. Never push hard-coded credentials to code repositories.

Prerequisite #2: AWS Key Pair
We will need an AWS Key Pair, consisting of a public key and a private key. The AWS Key Pair is a set of security credentials that we need to connect to an Amazon EC2 instance.

Amazon EC2 stores the public key on our instance, and we store the private key. For Linux instances, the private key allows us to securely SSH into our instance.

We can create the AWS Key Pair using the AWS Console, AWS CLI, or PowerShell. The instructions are at the Amazon EC2 key pairs and Linux instances official documentation.

A better way is using Terraform to create the AWS Key Pair. First, we will need to create a file called key-pair-main.tf, and we add the following code:

# Generates a secure private key and encodes it as PEM
resource "tls_private_key" "key_pair" {
  algorithm = "RSA"
  rsa_bits  = 4096
}
# Create the Key Pair
resource "aws_key_pair" "key_pair" {
  key_name   = "linux-key-pair"  
  public_key = tls_private_key.key_pair.public_key_openssh
}
# Save file
resource "local_file" "ssh_key" {
  filename = "${aws_key_pair.key_pair.key_name}.pem"
  content  = tls_private_key.key_pair.private_key_pem
}
This code will generate an AWS Key Pair, and using the resource “local_file” will save the file to the folder where we run our Terraform code.

Creating a Terraform file for AWS Authentication
First, we create a file called provider-variables.tf, used by the AWS authentication variables.

We will use an AWS Access Key, AWS Secret Key, and the AWS Region:

variable "aws_access_key" {
  type = string
  description = "AWS access key"
}
variable "aws_secret_key" {
  type = string
  description = "AWS secret key"
}
variable "aws_region" {
  type = string
  description = "AWS region"
}
After that, we edit the file terraform.tfvars and add the AWS credential information (we will replace ‘complete-this’ strings with our values at run time):

aws_access_key = "complete-this"
aws_secret_key = "complete-this"
aws_region     = "eu-west-1"
Finally, we create the provider-main.tf, used to configure Terraform and the AWS provider:

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.0"
    }
  }
}
provider "aws" {
  access_key = var.aws_access_key
  secret_key = var.aws_secret_key
  region     = var.aws_region
}
Creating a Terraform file for the Network
In this step, we will create the file network-variables.tf to configure network variables and add the following code:

# AWS AZ
variable "aws_region_az" {
  type        = string
  description = "AWS Region AZ"
  default     = "eu-west-1c"
}
# VPC Variables
variable "vpc_cidr" {
  type        = string
  description = "CIDR for the VPC"
  default     = "10.1.64.0/18"
}
# Subnet Variables
variable "vpc_public_subnet_cidr" {
  type        = string
  description = "CIDR for the public subnet"
  default     = "10.1.64.0/24"
}
Then, we create the network-main.tf to configure the network and add the following code. This simple code will create a VPC, a public subnet, an internet gateway, and required routes.

# Create the VPC
resource "aws_vpc" "vpc" {
  cidr_block           = var.vpc_cidr
  enable_dns_hostnames = true
}
# Define the public subnet
resource "aws_subnet" "public-subnet" {
  vpc_id            = aws_vpc.vpc.id
  cidr_block        = var.public_subnet_cidr
  availability_zone = var.aws_az
}
# Define the internet gateway
resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.vpc.id
}
# Define the public route table
resource "aws_route_table" "public-rt" {
  vpc_id = aws_vpc.vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }
}
# Assign the public route table to the public subnet
resource "aws_route_table_association" "public-rt-association" {
  subnet_id      = aws_subnet.public-subnet.id
  route_table_id = aws_route_table.public-rt.id
}
Creating a Terraform file for macOS Versions Variables
We will create the macos-versions.tf file, used to store variables for the different versions of Apple macOS. In this file, we support the latest builds of macOS available:

Apple macOS Mojave 10.4
Apple macOS Catalina 10.5
Apple macOS Big Sur 11
Apple macOS Monterey 12
# Get latest Apple macOS Monterey 12 AMI
data "aws_ami" "mac-monterrey" {
  most_recent = true
  owners      = ["amazon"]
  filter {
    name = "name"
    values = ["amzn-ec2-macos-12*"]
  }
}
# Get latest Apple macOS Big Sur 11 AMI
data "aws_ami" "mac-bigsur" {
  most_recent = true
  owners      = ["amazon"]
  filter {
    name = "name"
    values = ["amzn-ec2-macos-11*"]
  }
}
# Get latest Apple macOS Catalina 10.5 AMI
data "aws_ami" "mac-catalina" {
  most_recent = true
  owners      = ["amazon"]
  filter {
    name = "name"
    values = ["amzn-ec2-macos-10.15*"]
  }
}
# Get latest Apple macOS Mojave 10.4 AMI
data "aws_ami" "mac-mojave" {
  most_recent = true
  owners      = ["amazon"]
  filter {
    name = "name"
    values = ["amzn-ec2-macos-10.14*"]
  }
}
Creating a Terraform file for the EC2 Dedicated Host
The macOS EC2 instances run on an EC2 Dedicated Host with the following EC2 instance type: mac1.metal, and each dedicated host is associated with an AZ (Availability Zone).

resource "aws_ec2_host" "macos-host" {
  instance_type     = "mac1.metal"
  availability_zone = var.aws_region_az
  tags = {
    Name = "macos-host"
  }
}
Creating a Terraform file for the macOS VM Main File
Finally, create the file macos-vm-main.tf to build the EC2 Instance. We will split the code for better clarity.

This code section will create the security group that allows incoming SSH connections.

resource "aws_security_group" "macos-sg" {
  name        = "macos-sg"
  description = "Allow incoming traffic to macOS EC2 Instance"
  vpc_id      = aws_vpc.vpc.id
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow incoming SSH connections"
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
This section of code will create the EC2 Instance. To update the version of macOS, update the ami line with a variable from the macos-versions.tf file.

# Create the EC2 Instance
resource "aws_instance" "macos-instance" {
  ami           = data.aws_ami.mac-monterrey.id
  host_id       = aws_ec2_host.macos-host.id
  instance_type = "mac1.metal"
  key_name      = aws_key_pair.key_pair.key_name
  
  subnet_id              = aws_subnet.public-subnet.id
  availability_zone      = var.aws_region_az
  vpc_security_group_ids = [aws_security_group.macos-sg.id]
  tags = {
    Name = "macos-instance"
  }
}
and here we create an Elastic IP (EIP) and attach it to the Linux EC2 instance:

# Create Elastic IP for the macOS instance
resource "aws_eip" "macos-eip" {
  vpc  = true
  tags = {
    Name = "macos-eip"
  }
}
# Associate Elastic IP to the macOS Insatance
resource "aws_eip_association" "macos-eip-association" {
  instance_id   = aws_instance.macos-instance.id
  allocation_id = aws_eip.macos-eip.id
}
Creating the Input Definition Variables File
In the last step, we are going to create input definition variables file terraform.tfvars and add the following code to the file:

# Network
aws_region_az      = "eu-west-1a"
vpc_cidr           = "10.11.0.0/16"
public_subnet_cidr = "10.11.1.0/24"
# AWS Settings
aws_access_key = "complete-this"
aws_secret_key = "complete-this"
aws_region     = "eu-west-1"
